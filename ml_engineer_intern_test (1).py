# -*- coding: utf-8 -*-
"""ml-engineer-intern-test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W6Ibl9hQWTdDufSsfR_TxWwPo_sHy5Bm
"""

import pandas as pd
# You may use any external libraries you need
import matplotlib.pyplot as plt

real_url = 'https://raw.githubusercontent.com/yee-kevin/code-test/main/dataset/real.csv'
real_data = pd.read_csv(real_url)
display(real_data)

synthetic_url = 'https://raw.githubusercontent.com/yee-kevin/code-test/main/dataset/synthetic.csv'
synthetic_data = pd.read_csv(synthetic_url)
display(synthetic_data)

"""#Data Quality Metric
For data quality of multivariate, I used client age and his credit limit to check for the correlation in actual and synthetic data. I used the ratio as the quality measure to see whether the ratio of two variables (any two) has the same relation curve in real and fake data.
In the case of credit limit and age, we can see that the ratio is not very close in real and fake datasets. It can be improved by learning the relation between the two variables by correlation.

# Data Privacy Metric
A client must have a credit limit of more than avg open to buy in the actual case. Like we can see in the real data, there is no such client having a credit limit less than avg open to buy because it can not happen. But, in synthetic data, we have 4426 such entities having credit limits less than open to buy which makes it unrealistic data. We must check for the inter-dependency between the attributes while generating fake data.
"""

# Your task:
# Design and code 1-2 NEW success metrics in Python. Use the 1-2 NEW success metrics you have designed to compare the real vs fake data.
# Provide a simple explanation of what this success metric does as #comments. 

# Your code here (edit as neccesary):
def metric_1(real_data, synthetic_data):
  ratio_real = real_data['Credit_Limit']/ real_data['Customer_Age']
  ratio_synthetic = synthetic_data['Credit_Limit']/ synthetic_data['Customer_Age']

  plt.plot(ratio_real)
  plt.plot(ratio_synthetic)
  plt.xlabel("Count")
  plt.ylabel("Ratio of credit limit by age")
  plt.legend(["Real","Fake"])
  plt.show()
  return None

def metric_2(real_data, synthetic_data):
  real = real_data['Credit_Limit']-real_data['Avg_Open_To_Buy']
  print("In real data, entries where;")
  print("Avg Open to Buy is less than Credit Limit: ",(real < 0).sum().sum())
  print("Avg Open to Buy is greater than Credit Limit: ",(real > 0).sum().sum())
  print("Avg Open to Buy is equal to Credit Limit: ",(real == 0).sum().sum())
  synthetic = synthetic_data['Credit_Limit']- synthetic_data['Avg_Open_To_Buy']
  print("In synthetic data, entries where;")
  print("Avg Open to Buy is less than Credit Limit: ",(synthetic < 0).sum().sum())
  print("Avg Open to Buy is grater than Credit Limit: ",(synthetic > 0).sum().sum())
  print("Avg Open to Buy is equal to Credit Limit: ",(synthetic == 0).sum().sum())
  return None

metric_1(real_data, synthetic_data)

metric_2(real_data, synthetic_data)

# Bonus:
# Host the new metric functions above as an API and call it in this notebook